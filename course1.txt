# Python Foundations: Complete Beginner to Advanced Journey
## A 16-Week Comprehensive Course with Integrated Financial Project
---

## Phase 1: Python Basics & Essential Developer Skills (Weeks 1-2)

### Week 1: First Steps with Python & Development Environment
#### Python Skills
- Variables, data types, basic operations
- Python syntax fundamentals
- Running Python programs

#### AI Assistant Skills
- Understanding AI coding assistants' capabilities
- **Foundation Prompting**: Basic prompt structure and clarity
- **Prompt Comparison Exercise**: Evaluating prompt effectiveness 
- **Documentation Practice**: Creating simple templates for syntax questions

#### Code Reading Skills
- Line-by-line execution tracing
- Identifying different parts of a program
- Reading code aloud to build understanding

#### Debugging Skills
- Understanding error messages
- Using print statements strategically
- Basic IDE debugging interface introduction

#### Project Integration: Finance Manager Stage 1
- Set up basic financial variables (income, expenses)
- Implement simple calculations (total expenses, remaining budget)
- Demonstrate immediate effects of changing variable values

#### Assessment
- Basic Python syntax quiz
- Calculator project evaluation
- **Prompt Quality**: Evaluation of 2-3 prompts created during the project

#### Learning Outcome
"I can write, read, and debug basic Python code and effectively request AI assistance for syntax and error understanding"

---

### Week 2: Data Types & Structured Problem Solving
#### Python Skills
- Strings, numbers, type conversion
- Input/output operations
- String formatting and manipulation

#### AI Assistant Skills
- Formulating clear syntax questions
- Getting examples through AI prompting
- **Context Setting in Prompts**: Providing relevant background information
- **Example-Driven Prompting**: Using input/output examples to clarify expectations

#### Code Reading Skills
- Predicting output before running code
- Tracing variable changes throughout execution
- Reading documentation and examples

#### Debugging Skills
- Identifying common type errors
- Debugging string formatting issues
- Finding and fixing input/output problems

#### Project Integration: Finance Manager Stage 2
- Add user input for financial data
- Implement proper currency formatting
- Create interactive budget calculator

#### Assessment
- String manipulation exercises
- Text processor project evaluation
- **Prompt Quality**: Evaluate clarity and specificity of prompts used

#### Learning Outcome
"I can manipulate different data types, troubleshoot errors methodically, and craft clear prompts for working with text data"

---

## Phase 2: Data Structures & Problem-Solving Techniques (Weeks 3-4)

### Week 3: Lists & Collections with Systematic Analysis
#### Python Skills
- Lists, list methods, basic list operations
- List comprehensions
- Nested lists and matrix operations

#### AI Assistant Skills
- Getting AI explanations for complex operations
- Using AI to suggest best practices
- **Data-Focused Prompting**: Techniques for describing data transformations
- **Constraint Communication**: Specifying limitations and requirements

#### Code Reading Skills
- Analyzing list transformations
- Visualizing list operations mentally
- Understanding indexing and slicing notation

#### Debugging Skills
- Fixing index errors and boundary issues
- Visualizing list contents during execution
- Using debugger to inspect list values

#### Project Integration: Finance Manager Stage 3
- Create lists for transaction tracking
- Process transactions with loops
- Display running balances

#### Assessment
- List manipulation coding challenges
- Todo list project functionality
- **Prompt Effectiveness**: Evaluation as part of project grading

#### Learning Outcome
"I can work with lists and efficiently diagnose collection-related problems while creating effective prompts for data manipulation"

---

### Week 4: Dictionaries, Sets & Data Structure Debugging
#### Python Skills
- Dictionaries, sets, nested data structures
- Dictionary methods and operations
- Choosing appropriate data structures

#### AI Assistant Skills
- Using input/output examples in prompts
- Getting AI suggestions for data structure optimization
- **Structure Description Prompts**: Techniques for describing complex data structures
- **Nested Data Prompting**: Communicating about multi-level data organizations

#### Code Reading Skills
- Reading complex data structure definitions
- Tracing dictionary and set operations
- Understanding nested data access patterns

#### Debugging Skills
- Troubleshooting key errors
- Inspecting nested data structures
- Using pretty-print for complex structures

#### Project Integration: Finance Manager Stage 4
- Use dictionaries for transaction categorization
- Group financial data by categories
- Generate spending summaries

#### Assessment
- Dictionary and set operations quiz
- Contact management system project
- **Peer Review**: Of prompts used for dictionary operations

#### Learning Outcome
"I can design appropriate data structures, debug complex data issues, and effectively communicate about data organization in prompts"

---

## Phase 3: Logic, Control Flow & Execution Tracing (Weeks 5-6)

### Week 5: Conditionals & Logical Debugging
#### Python Skills
- If/else statements, boolean operations
- Comparison operators
- Complex conditional expressions

#### AI Assistant Skills
- Using AI to review logical expressions
- Getting alternative logical implementations
- **Algorithm Description Techniques**: Translating logical thinking into clear prompts
- **Edge Case Specification**: Communicating corner cases and special conditions

#### Code Reading Skills
- Tracing execution paths in conditional structures
- Identifying all possible execution branches
- Understanding complex boolean expressions

#### Debugging Skills
- Using breakpoints in conditional blocks
- Debugging boolean logic errors
- Validating condition boundaries

#### Project Integration: Finance Manager Stage 5
- Implement budget limits and alerts
- Add conditional status messages
- Create budget warnings based on thresholds

#### Assessment
- Boolean logic and conditional exercises
- Decision-making application project
- **Prompt Improvement**: Exercise based on instructor feedback

#### Learning Outcome
"I can implement, trace, and debug complex decision logic and create prompts that precisely communicate logical requirements"

---

### Week 6: Loops & Iteration Debugging
#### Python Skills
- For loops, while loops, nested loops
- Loop control statements (break, continue)
- Iteration patterns and techniques

#### AI Assistant Skills
- Explaining algorithm intentions to AI
- Getting AI to optimize loop efficiency
- **Iteration Prompting Patterns**: How to describe loops and recursive processes
- **Efficiency Specification**: Communicating performance requirements

#### Code Reading Skills
- Mentally simulating loop execution
- Understanding nested loop interactions
- Analyzing loop efficiency and termination conditions

#### Debugging Skills
- Debugging infinite loops
- Using loop variable watches
- Stepping through iterations in debugger

#### Project Integration: Finance Manager Stage 6
- Add monthly expense tracking
- Implement nested loops for financial analysis
- Compare spending across time periods

#### Assessment
- Loop implementation challenges
- Data analysis tool project
- **Analysis**: Students rate the effectiveness of their loop-related prompts

#### Learning Outcome
"I can implement efficient loops, systematically debug iteration issues, and create prompts that communicate algorithmic requirements clearly"

---

## Phase 4: Functions, Modularity & Structured Debugging (Weeks 7-8)

### Week 7: Functions & Component-Level Debugging
#### Python Skills
- Function definition, parameters, return values
- Default arguments, variable-length arguments
- Scope and namespaces

#### AI Assistant Skills
- Writing clear function specifications for AI
- Using AI to suggest function improvements
- **Component-Level Prompts**: Creating focused prompts for modular functionality
- **Interface Design Prompting**: Using prompts to define function signatures and behaviors

#### Code Reading Skills
- Following function call execution flow
- Understanding parameter passing and return values
- Reading recursive function implementations

#### Debugging Skills
- Setting function breakpoints
- Inspecting parameter values
- Analyzing call stacks
- Isolating function-specific bugs

#### Project Integration: Finance Manager Stage 7
- Create modular financial functions
- Implement transaction handling functions
- Develop category analysis functions

#### Assessment
- Function implementation exercises
- Utility function library project
- **Evaluation**: Completeness of function-related prompts

#### Learning Outcome
"I can design modular functions, debug them in isolation, and write prompts that clearly define component functionality"

---

### Week 8: Files, Errors & External Interaction Debugging
#### Python Skills
- File operations (read, write, append)
- Exception handling (try, except, finally)
- Working with different file formats

#### AI Assistant Skills
- Getting AI help with file processing patterns
- Using AI for error handling suggestions
- **Error Handling Specification**: Communicating exception requirements
- **External System Interaction Prompts**: Describing file operations and I/O

#### Code Reading Skills
- Understanding file operation patterns
- Analyzing exception handling flow
- Reading code that interacts with external systems

#### Debugging Skills
- Debugging file access issues
- Exception breakpoints
- Simulating error conditions
- Post-mortem debugging

#### Project Integration: Finance Manager Stage 8
- Add file saving/loading for transactions
- Implement error handling for file operations
- Create data persistence for the finance manager

#### Assessment
- File handling and exception exercises
- Log analyzer project
- **Documentation**: Students provide examples of iteratively improved prompts based on initial results

#### Learning Outcome
"I can work with external data, systematically debug interaction issues, and create robust prompts for error-handling scenarios"

---

## Phase 5: OOP, Libraries & Advanced Debugging (Weeks 9-10)

### Week 9: Basic Classes & Object-Oriented Debugging
#### Python Skills
- Class definition, attributes, methods
- Instantiation and object usage
- Inheritance and method overriding

#### AI Assistant Skills
- Getting AI help with class design
- Using AI to suggest appropriate methods
- **System Design Prompts**: Creating prompts for classes and object relationships
- **Behavioral Description**: Communicating about object interactions

#### Code Reading Skills
- Reading class definitions and relationships
- Understanding instance creation and lifecycle
- Tracing method execution flow

#### Debugging Skills
- Inspecting object state
- Debugging constructor issues
- Tracking attribute changes
- Using object inspection in debugger

#### Project Integration: Finance Manager Stage 9
- Create Transaction and Budget classes
- Implement object-oriented financial model
- Add methods for financial analysis

#### Assessment
- Object-oriented programming exercises
- Game project implementation
- **Evaluation**: Alignment between OOP design and prompts used

#### Learning Outcome
"I understand OOP basics, can debug object-related issues, and craft prompts that effectively communicate class design and behavior"

---

### Week 10: Libraries, Integration & System-Level Debugging
#### Python Skills
- Imports, standard library usage
- Third-party packages and installation
- API usage and documentation

#### AI Assistant Skills
- Using AI to find appropriate libraries
- Getting AI help with API usage
- **Integration Prompts**: Describing how components should work together
- **Library Utilization Prompts**: Crafting prompts that leverage existing libraries

#### Code Reading Skills
- Reading library documentation and source code
- Understanding import and dependency patterns
- Analyzing API usage examples

#### Debugging Skills
- Debugging import issues
- Diagnosing library integration problems
- Using library-specific debugging tools
- Isolating third-party vs. your code issues

#### Project Integration: Finance Manager Stage 10
- Add data visualization for spending trends
- Implement matplotlib for financial charts
- Create visual reports of budget status

#### Assessment
- Library usage exercises
- Data visualization application project
- **Final Deliverable**: Comprehensive prompt portfolio with analysis of effectiveness throughout the course

#### Learning Outcome
"I can integrate external libraries, debug complex interactions, and develop sophisticated prompts for multi-component systems"

---

## Phase 6: Testing and Production-Ready Code (Weeks 11-12)

### Week 11: Fundamentals of Testing
#### Python Skills
- Unit testing fundamentals
- pytest framework basics
- Test case design and implementation
- Testing edge cases and boundary conditions

#### AI Assistant Skills
- Using AI to suggest test cases
- Writing prompts for test generation
- **Test Coverage Prompts**: Creating prompts that identify untested scenarios
- **Edge Case Generation**: Using AI to identify boundary conditions

#### Code Reading Skills
- Reading and understanding test code
- Identifying testable components
- Recognizing test patterns and best practices

#### Testing Skills
- Writing basic unit tests
- Test naming conventions
- Assertions and verification
- Running test suites

#### Project Integration: Finance Manager Stage 11
- Create unit tests for financial logic
- Test budget calculations and alerts
- Implement test suite for all components

#### Assessment
- Unit test implementation exercises
- Test coverage analysis
- **Prompt Quality**: Evaluate effectiveness of test-focused prompts

#### Learning Outcome
"I can write effective unit tests for Python functions, use AI to identify test cases, and verify code behavior systematically"

---

### Week 12: Advanced Testing and Integration
#### Python Skills
- Test-driven development (TDD)
- Mock objects and dependency injection
- Integration testing
- Test coverage and reporting

#### AI Assistant Skills
- Using AI for TDD workflow
- Getting mock object suggestions
- **Test-First Prompting**: Creating prompts that describe behavior before implementation
- **Integration Test Design**: Describing component interactions for testing

#### Code Reading Skills
- Understanding test-driven codebases
- Reading mock implementations
- Analyzing test coverage reports

#### Testing Skills
- Implementing TDD workflow
- Creating and using mock objects
- Writing integration tests
- Measuring and improving test coverage

#### Project Integration: Finance Manager Stage 12
- Complete core application with all features
- Add comprehensive testing
- Implement continuous integration concepts
- Add data import/export features
- Create comprehensive reporting

#### Assessment
- TDD implementation challenge
- Final project with test suite
- **Final Deliverable**: Complete prompt portfolio including test-focused prompts

#### Learning Outcome
"I can use test-driven development, create comprehensive test suites including mocks and integration tests, and use AI effectively throughout the testing process"

---

## Phase 7: Advanced Python Features (Weeks 13-14)

### Week 13: Iterators, Generators, and Functional Programming
#### Python Skills
- Iterator protocol (`__iter__`, `__next__`)
- Generator functions with `yield`
- Generator expressions
- Lambda functions and closures
- Functional programming: `map`, `filter`, `reduce`

#### AI Assistant Skills
- Using AI to optimize data processing code
- Getting functional alternatives to imperative code
- **Data Pipeline Prompts**: Describing processing steps and transformations
- **Iteration Pattern Design**: Creating prompts for complex iteration scenarios

#### Code Reading Skills
- Understanding generator control flow
- Reading functional programming patterns
- Analyzing memory and performance implications of iterators

#### Debugging Skills
- Debugging generators and iterators
- Using breakpoints in generator functions
- Stepping through lazy evaluation
- Analyzing performance bottlenecks

#### Project Integration: Finance Manager Stage 13
- Implement data processing pipelines using generators
- Create lazy-loaded transaction history
- Add functional processing for financial calculations
- Implement memory-efficient report generation
- Create investment scenario generators

#### Assessment
- Generator implementation exercises
- Streaming data processor project
- **Analysis**: Evaluation of prompts for functional programming tasks

#### Learning Outcome
"I can implement memory-efficient data processing using generators and functional programming techniques and clearly communicate these patterns through prompts"

---

### Week 14: Decorators, Context Managers, and Advanced OOP
#### Python Skills
- Creating and using decorators
- Context managers with `with` statements
- Creating custom context managers
- Advanced OOP: Multiple inheritance, mixins
- Magic/dunder methods (`__str__`, `__repr__`, `__eq__`, etc.)
- Abstract base classes and interfaces

#### AI Assistant Skills
- Getting AI help with decorator patterns
- Using AI for OOP design challenges
- **Behavioral Pattern Prompts**: Describing decorators and context managers
- **Interface Design Communication**: Creating prompts for complex object interactions

#### Code Reading Skills
- Understanding decorator execution flow
- Reading context manager implementations
- Analyzing class hierarchies and method resolution order

#### Debugging Skills
- Debugging decorated functions
- Troubleshooting context manager issues
- Resolving inheritance conflicts
- Inspecting method resolution order

#### Project Integration: Finance Manager Stage 14
- Add decorators for transaction logging and validation
- Implement context managers for file handling
- Create abstract base classes for financial instruments
- Add advanced OOP features to financial model
- Implement multiple inheritance for specialized accounts

#### Assessment
- Decorator and context manager exercises
- Framework extension project
- **Evaluation**: Quality of prompts for advanced Python patterns

#### Learning Outcome
"I can implement advanced Python features like decorators and context managers, design sophisticated class hierarchies, and communicate these concepts effectively through prompts"

---

## Phase 8: Specialized Applications (Weeks 15-16)

### Week 15: Concurrency, Async Programming, and Database Integration
#### Python Skills
- Threading and multiprocessing
- Asynchronous programming with `async`/`await`
- Database connectivity with SQLite
- SQL basics and query execution
- ORM concepts with SQLAlchemy introduction

#### AI Assistant Skills
- Using AI to design concurrent systems
- Getting database schema suggestions
- **Concurrency Pattern Prompts**: Describing parallel execution needs
- **Data Persistence Requirements**: Creating database-focused prompts

#### Code Reading Skills
- Understanding concurrent execution patterns
- Reading asynchronous code
- Analyzing database access patterns
- Understanding query execution plans

#### Debugging Skills
- Debugging thread synchronization issues
- Troubleshooting async execution
- Diagnosing database performance problems
- Using database query analyzers

#### Project Integration: Finance Manager Stage 15
- Add SQLite database for transaction storage
- Implement concurrent transaction processing
- Create async API for financial data retrieval
- Build performance dashboards using async data loading
- Add historical data analysis with efficient queries

#### Assessment
- Concurrency implementation exercises
- Database-backed application project
- **Prompt Portfolio**: Evaluation of database and concurrency prompts

#### Learning Outcome
"I can implement concurrent and asynchronous systems, work with databases effectively, and communicate complex execution patterns through clear prompts"

---

### Week 16: Web Development, Regular Expressions, and Type Hints
#### Python Skills
- Web application basics with Flask
- RESTful API development
- Regular expressions with the `re` module
- Static type annotations with the `typing` module
- Type checking with mypy

#### AI Assistant Skills
- Using AI for API design
- Getting regex pattern suggestions
- **Web Interface Requirements**: Creating prompts for web features
- **Type Specification Prompts**: Communicating types and interfaces

#### Code Reading Skills
- Understanding web application structure
- Reading and analyzing regex patterns
- Interpreting type annotations
- Analyzing API specifications

#### Debugging Skills
- Debugging web application issues
- Testing and refining regex patterns
- Resolving type checking errors
- API endpoint testing

#### Project Integration: Finance Manager Stage 16
- Create web interface for the finance manager
- Implement RESTful API for remote access
- Add advanced search with regex
- Implement comprehensive type hints
- Add static analysis to CI pipeline
- Deploy the complete application

#### Assessment
- Web application implementation project
- Type-annotated module implementation
- **Final Project**: Complete finance manager with all advanced features
- **Final Prompt Portfolio**: Comprehensive collection of effective prompts across all domains

#### Learning Outcome
"I can develop web applications, use advanced pattern matching, implement type-safe code, and effectively communicate requirements across all Python domains through clear, effective prompts"

---

## Project Development Progression

### Personal Finance Manager/Budget Tracker Evolution
1. **Stage 1-2**: Basic calculations and user input
2. **Stage 3-4**: Lists and dictionaries for transaction tracking
3. **Stage 5-6**: Conditional alerts and monthly analysis
4. **Stage 7-8**: Modular functions and file persistence
5. **Stage 9-10**: OOP design and data visualization
6. **Stage 11-12**: Complete testing and core features
7. **Stage 13-14**: Advanced Python features and efficient processing
8. **Stage 15-16**: Concurrent processing, database, and web interface

### Progressive Advanced Features
- **Stage 13**: Memory-efficient large transaction history
- **Stage 14**: Transaction validation and financial instrument abstraction
- **Stage 15**: Multi-user support and concurrent transaction processing
- **Stage 16**: Web access and API integration with other financial services

### Prompt Engineering Assessment Framework

Throughout the course, prompt engineering skills will be evaluated using the following rubric:

#### Prompt Quality Rubric
1. **Clarity** (25%)
   - Specific request definition
   - Technical accuracy of terminology
   - Logical organization
   - Context provision

2. **Completeness** (25%)
   - All relevant requirements included
   - Constraints clearly defined
   - Edge cases considered
   - Success criteria specified

3. **Effectiveness** (25%)
   - Prompt yields useful responses
   - Minimal iterations needed
   - Appropriate level of detail
   - Avoids common pitfalls

4. **Iteration & Improvement** (25%)
   - Evidence of refinement
   - Learning from previous results
   - Strategic adjustments
   - Pattern recognition

### Final Deliverable
By the end of the course, students will have:
1. A production-ready Personal Finance Manager web application with:
   - Comprehensive financial tracking features
   - Memory-efficient processing for large datasets
   - Database persistence and multi-user support
   - Modern web interface and API access
   - Complete test suite and type safety
2. A comprehensive portfolio of effective prompts across all Python domains
3. Documentation of their learning journey across all skill dimensions

---

## Learning Resources

### Required Materials
- Python 3.9+ installed
- Text editor or IDE (VS Code recommended)
- Course GitHub repository access
- AI assistant account (specific platform to be determined)
- SQLite and database visualization tools
- Flask and related web development libraries
- Pytest framework and extensions
- Coverage.py for test coverage analysis
- Mypy for static type checking

### Recommended Resources
- "Python Crash Course" by Eric Matthes
- "Effective Python" by Brett Slatkin
- "Fluent Python" by Luciano Ramalho
- "Python Testing with pytest" by Brian Okken
- "Test-Driven Development with Python" by Harry Percival
- "Database Design for Mere Mortals" by Michael J. Hernandez
- "Flask Web Development" by Miguel Grinberg
- Official Python documentation (python.org)
- Course-specific prompt engineering and testing handbook

---

## Support and Office Hours

### Instructor Support
- Scheduled office hours: [TIMES]
- Code review sessions: [FREQUENCY]
- Project milestone check-ins: Weekly
- Prompt engineering review sessions on request

### Online Resources
- Course discussion forum
- Project code repository
- Video tutorials for each project stage
- Solution walkthroughs

---

*This syllabus is subject to change based on class progress and needs. All changes will be communicated in advance.*
