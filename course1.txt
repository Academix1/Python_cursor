# Python Foundations: Complete Beginner's Journey
## A 12-Week Comprehensive Course with Integrated Prompt Engineering and Testing Skills

---

## Course Overview

This comprehensive 12-week course guides beginners through Python programming fundamentals while simultaneously developing essential developer skills including code reading, debugging, testing, and AI-assisted programming. The curriculum uniquely integrates prompt engineering and testing skills throughout, preparing students to effectively collaborate with AI coding assistants, write reliable, tested code, and build a solid foundation in Python.

### Learning Outcomes
By the end of this course, students will be able to:
- Write, read, and debug Python code with confidence
- Design appropriate data structures and implement efficient algorithms
- Create modular, object-oriented programs
- Effectively collaborate with AI coding assistants through well-crafted prompts
- Debug code systematically using both traditional and AI-assisted methods
- Write and run tests to verify code correctness and reliability
- Use test-driven development principles for building robust applications
- Build complete, well-tested applications that integrate external libraries

---

## Phase 1: Python Basics & Essential Developer Skills (Weeks 1-2)

### Week 1: First Steps with Python & Development Environment
#### Python Skills
- Variables, data types, basic operations
- Python syntax fundamentals
- Running Python programs

#### AI Assistant Skills
- Understanding AI coding assistants' capabilities
- **Foundation Prompting**: Basic prompt structure and clarity
- **Prompt Comparison Exercise**: Evaluating prompt effectiveness 
- **Documentation Practice**: Creating simple templates for syntax questions

#### Code Reading Skills
- Line-by-line execution tracing
- Identifying different parts of a program
- Reading code aloud to build understanding

#### Debugging Skills
- Understanding error messages
- Using print statements strategically
- Basic IDE debugging interface introduction

#### Project
Simple calculator with guided debugging practice
- **Integration Activity**: "AI Debugging Partner" - Write prompts to get help understanding error messages
- **Deliverable**: Working calculator program + documented prompts used during development

#### Assessment
- Basic Python syntax quiz
- Calculator project evaluation
- **Prompt Quality**: Evaluation of 2-3 prompts created during the project

#### Learning Outcome
"I can write, read, and debug basic Python code and effectively request AI assistance for syntax and error understanding"

---

### Week 2: Data Types & Structured Problem Solving
#### Python Skills
- Strings, numbers, type conversion
- Input/output operations
- String formatting and manipulation

#### AI Assistant Skills
- Formulating clear syntax questions
- Getting examples through AI prompting
- **Context Setting in Prompts**: Providing relevant background information
- **Example-Driven Prompting**: Using input/output examples to clarify expectations

#### Code Reading Skills
- Predicting output before running code
- Tracing variable changes throughout execution
- Reading documentation and examples

#### Debugging Skills
- Identifying common type errors
- Debugging string formatting issues
- Finding and fixing input/output problems

#### Project
Text processor with systematic debugging practice
- **Mini-Workshop**: Crafting prompts for string manipulation tasks
- **Integration Activity**: Document prompts used for implementing different features

#### Assessment
- String manipulation exercises
- Text processor project evaluation
- **Prompt Quality**: Evaluate clarity and specificity of prompts used

#### Learning Outcome
"I can manipulate different data types, troubleshoot errors methodically, and craft clear prompts for working with text data"

---

## Phase 2: Data Structures & Problem-Solving Techniques (Weeks 3-4)

### Week 3: Lists & Collections with Systematic Analysis
#### Python Skills
- Lists, list methods, basic list operations
- List comprehensions
- Nested lists and matrix operations

#### AI Assistant Skills
- Getting AI explanations for complex operations
- Using AI to suggest best practices
- **Data-Focused Prompting**: Techniques for describing data transformations
- **Constraint Communication**: Specifying limitations and requirements

#### Code Reading Skills
- Analyzing list transformations
- Visualizing list operations mentally
- Understanding indexing and slicing notation

#### Debugging Skills
- Fixing index errors and boundary issues
- Visualizing list contents during execution
- Using debugger to inspect list values

#### Project
Todo list manager with comprehensive testing
- **Practical Exercise**: Writing prompts for different list operations
- **Integration Activity**: "Prompt Engineering Log" - Maintain documentation of prompts used, responses received, and improvements made

#### Assessment
- List manipulation coding challenges
- Todo list project functionality
- **Prompt Effectiveness**: Evaluation as part of project grading

#### Learning Outcome
"I can work with lists and efficiently diagnose collection-related problems while creating effective prompts for data manipulation"

---

### Week 4: Dictionaries, Sets & Data Structure Debugging
#### Python Skills
- Dictionaries, sets, nested data structures
- Dictionary methods and operations
- Choosing appropriate data structures

#### AI Assistant Skills
- Using input/output examples in prompts
- Getting AI suggestions for data structure optimization
- **Structure Description Prompts**: Techniques for describing complex data structures
- **Nested Data Prompting**: Communicating about multi-level data organizations

#### Code Reading Skills
- Reading complex data structure definitions
- Tracing dictionary and set operations
- Understanding nested data access patterns

#### Debugging Skills
- Troubleshooting key errors
- Inspecting nested data structures
- Using pretty-print for complex structures

#### Project
Contact management system with nested data validation
- **Workshop**: Compare AI responses to different data structure prompts
- **Integration Activity**: Create a "Prompt Strategy" document outlining planned prompts for implementation

#### Assessment
- Dictionary and set operations quiz
- Contact management system project
- **Peer Review**: Of prompts used for dictionary operations

#### Learning Outcome
"I can design appropriate data structures, debug complex data issues, and effectively communicate about data organization in prompts"

---

## Phase 3: Logic, Control Flow & Execution Tracing (Weeks 5-6)

### Week 5: Conditionals & Logical Debugging
#### Python Skills
- If/else statements, boolean operations
- Comparison operators
- Complex conditional expressions

#### AI Assistant Skills
- Using AI to review logical expressions
- Getting alternative logical implementations
- **Algorithm Description Techniques**: Translating logical thinking into clear prompts
- **Edge Case Specification**: Communicating corner cases and special conditions

#### Code Reading Skills
- Tracing execution paths in conditional structures
- Identifying all possible execution branches
- Understanding complex boolean expressions

#### Debugging Skills
- Using breakpoints in conditional blocks
- Debugging boolean logic errors
- Validating condition boundaries

#### Project
Decision-making application with edge case handling
- **Exercise**: Craft prompts that describe different logical patterns
- **Integration Activity**: Create "prompt pairs" - one for implementation and one for testing edge cases

#### Assessment
- Boolean logic and conditional exercises
- Decision-making application project
- **Prompt Improvement**: Exercise based on instructor feedback

#### Learning Outcome
"I can implement, trace, and debug complex decision logic and create prompts that precisely communicate logical requirements"

---

### Week 6: Loops & Iteration Debugging
#### Python Skills
- For loops, while loops, nested loops
- Loop control statements (break, continue)
- Iteration patterns and techniques

#### AI Assistant Skills
- Explaining algorithm intentions to AI
- Getting AI to optimize loop efficiency
- **Iteration Prompting Patterns**: How to describe loops and recursive processes
- **Efficiency Specification**: Communicating performance requirements

#### Code Reading Skills
- Mentally simulating loop execution
- Understanding nested loop interactions
- Analyzing loop efficiency and termination conditions

#### Debugging Skills
- Debugging infinite loops
- Using loop variable watches
- Stepping through iterations in debugger

#### Project
Data analysis tool with robust loop implementations
- **Workshop**: Debug loop issues using carefully crafted prompts
- **Integration Activity**: Document prompts used for implementing efficient loops

#### Assessment
- Loop implementation challenges
- Data analysis tool project
- **Analysis**: Students rate the effectiveness of their loop-related prompts

#### Learning Outcome
"I can implement efficient loops, systematically debug iteration issues, and create prompts that communicate algorithmic requirements clearly"

---

## Phase 4: Functions, Modularity & Structured Debugging (Weeks 7-8)

### Week 7: Functions & Component-Level Debugging
#### Python Skills
- Function definition, parameters, return values
- Default arguments, variable-length arguments
- Scope and namespaces

#### AI Assistant Skills
- Writing clear function specifications for AI
- Using AI to suggest function improvements
- **Component-Level Prompts**: Creating focused prompts for modular functionality
- **Interface Design Prompting**: Using prompts to define function signatures and behaviors

#### Code Reading Skills
- Following function call execution flow
- Understanding parameter passing and return values
- Reading recursive function implementations

#### Debugging Skills
- Setting function breakpoints
- Inspecting parameter values
- Analyzing call stacks
- Isolating function-specific bugs

#### Project
Utility function library with comprehensive testing
- **Exercise**: Transform function specifications into effective prompts
- **Integration Activity**: Create a "prompt library" with templates for different function types

#### Assessment
- Function implementation exercises
- Utility function library project
- **Evaluation**: Completeness of function-related prompts

#### Learning Outcome
"I can design modular functions, debug them in isolation, and write prompts that clearly define component functionality"

---

### Week 8: Files, Errors & External Interaction Debugging
#### Python Skills
- File operations (read, write, append)
- Exception handling (try, except, finally)
- Working with different file formats

#### AI Assistant Skills
- Getting AI help with file processing patterns
- Using AI for error handling suggestions
- **Error Handling Specification**: Communicating exception requirements
- **External System Interaction Prompts**: Describing file operations and I/O

#### Code Reading Skills
- Understanding file operation patterns
- Analyzing exception handling flow
- Reading code that interacts with external systems

#### Debugging Skills
- Debugging file access issues
- Exception breakpoints
- Simulating error conditions
- Post-mortem debugging

#### Project
Log analyzer with comprehensive error handling
- **Workshop**: Create prompts for different error scenarios
- **Integration Activity**: Design prompts specifically for error handling implementations

#### Assessment
- File handling and exception exercises
- Log analyzer project
- **Documentation**: Students provide examples of iteratively improved prompts based on initial results

#### Learning Outcome
"I can work with external data, systematically debug interaction issues, and create robust prompts for error-handling scenarios"

---

## Phase 5: OOP, Libraries & Advanced Debugging (Weeks 9-10)

### Week 9: Basic Classes & Object-Oriented Debugging
#### Python Skills
- Class definition, attributes, methods
- Instantiation and object usage
- Inheritance and method overriding

#### AI Assistant Skills
- Getting AI help with class design
- Using AI to suggest appropriate methods
- **System Design Prompts**: Creating prompts for classes and object relationships
- **Behavioral Description**: Communicating about object interactions

#### Code Reading Skills
- Reading class definitions and relationships
- Understanding instance creation and lifecycle
- Tracing method execution flow

#### Debugging Skills
- Inspecting object state
- Debugging constructor issues
- Tracking attribute changes
- Using object inspection in debugger

#### Project
Simple game with class-based architecture
- **Exercise**: Translate class diagrams into effective prompts
- **Integration Activity**: Create a "prompt architecture" document showing how prompts will be used for different classes

#### Assessment
- Object-oriented programming exercises
- Game project implementation
- **Evaluation**: Alignment between OOP design and prompts used

#### Learning Outcome
"I understand OOP basics, can debug object-related issues, and craft prompts that effectively communicate class design and behavior"

---

### Week 10: Libraries, Integration & System-Level Debugging
#### Python Skills
- Imports, standard library usage
- Third-party packages and installation
- API usage and documentation

#### AI Assistant Skills
- Using AI to find appropriate libraries
- Getting AI help with API usage
- **Integration Prompts**: Describing how components should work together
- **Library Utilization Prompts**: Crafting prompts that leverage existing libraries

#### Code Reading Skills
- Reading library documentation and source code
- Understanding import and dependency patterns
- Analyzing API usage examples

#### Debugging Skills
- Debugging import issues
- Diagnosing library integration problems
- Using library-specific debugging tools
- Isolating third-party vs. your code issues

#### Project
Data visualization application with multiple libraries
- **Workshop**: Develop prompts for integrating multiple components
- **Integration Activity**: Include a "prompt strategy" section in the project documentation

#### Assessment
- Library usage exercises
- Data visualization application project
- **Final Deliverable**: Comprehensive prompt portfolio with analysis of effectiveness throughout the course

#### Learning Outcome
"I can integrate external libraries, debug complex interactions, and develop sophisticated prompts for multi-component systems"

---

## Phase 6: Testing and Production-Ready Code (Weeks 11-12)

### Week 11: Fundamentals of Testing
#### Python Skills
- Unit testing fundamentals
- pytest framework basics
- Test case design and implementation
- Testing edge cases and boundary conditions

#### AI Assistant Skills
- Using AI to suggest test cases
- Writing prompts for test generation
- **Test Coverage Prompts**: Creating prompts that identify untested scenarios
- **Edge Case Generation**: Using AI to identify boundary conditions

#### Code Reading Skills
- Reading and understanding test code
- Identifying testable components
- Recognizing test patterns and best practices

#### Testing Skills
- Writing basic unit tests
- Test naming conventions
- Assertions and verification
- Running test suites

#### Project
Test suite for previous project components
- **Workshop**: Using AI to generate test cases for existing functions
- **Integration Activity**: Create comprehensive test suite for utility functions from Week 7

#### Assessment
- Unit test implementation exercises
- Test coverage analysis
- **Prompt Quality**: Evaluate effectiveness of test-focused prompts

#### Learning Outcome
"I can write effective unit tests for Python functions, use AI to identify test cases, and verify code behavior systematically"

---

### Week 12: Advanced Testing and Integration
#### Python Skills
- Test-driven development (TDD)
- Mock objects and dependency injection
- Integration testing
- Test coverage and reporting

#### AI Assistant Skills
- Using AI for TDD workflow
- Getting mock object suggestions
- **Test-First Prompting**: Creating prompts that describe behavior before implementation
- **Integration Test Design**: Describing component interactions for testing

#### Code Reading Skills
- Understanding test-driven codebases
- Reading mock implementations
- Analyzing test coverage reports

#### Testing Skills
- Implementing TDD workflow
- Creating and using mock objects
- Writing integration tests
- Measuring and improving test coverage

#### Project
Full-stack application with comprehensive testing
- **Exercise**: Practice TDD workflow with AI assistance
- **Integration Activity**: Implement both unit and integration tests for final project

#### Assessment
- TDD implementation challenge
- Final project with test suite
- **Final Deliverable**: Complete prompt portfolio including test-focused prompts

#### Learning Outcome
"I can use test-driven development, create comprehensive test suites including mocks and integration tests, and use AI effectively throughout the testing process"

---

## Assessment Frameworks

### Prompt Engineering Assessment Framework

Throughout the course, prompt engineering skills will be evaluated using the following rubric:

### Prompt Quality Rubric
1. **Clarity** (25%)
   - Specific request definition
   - Technical accuracy of terminology
   - Logical organization
   - Context provision

2. **Completeness** (25%)
   - All relevant requirements included
   - Constraints clearly defined
   - Edge cases considered
   - Success criteria specified

3. **Effectiveness** (25%)
   - Prompt yields useful responses
   - Minimal iterations needed
   - Appropriate level of detail
   - Avoids common pitfalls

4. **Iteration & Improvement** (25%)
   - Evidence of refinement
   - Learning from previous results
   - Strategic adjustments
   - Pattern recognition

### Prompt Engineering Deliverables
1. **Weekly Documentation**: Prompts used in each project with analysis
2. **Prompt Portfolio**: Collection of effective prompts developed throughout the course
3. **Reflection Journal**: Analysis of prompt effectiveness and lessons learned
4. **Final Project**: Comprehensive implementation with prompt engineering strategy

---

## Prompt Engineering and Testing Templates

### Code Explanation Request Template
```
I'm looking at this Python code: [CODE]
I'm not sure about [SPECIFIC ASPECT].
Can you explain how [SPECIFIC PART] works?
What I currently understand is [CURRENT UNDERSTANDING].
```

### Debugging Assistance Template
```
I have a Python program that is supposed to [INTENDED BEHAVIOR]
But it's currently [ACTUAL BEHAVIOR]
Here's the code: [CODE]
Here's the error message (if any): [ERROR]
I've already tried: [PREVIOUS ATTEMPTS]
```

### Implementation Request Template
```
I need to implement a function that [PURPOSE]
Inputs: [INPUT PARAMETERS AND TYPES]
Expected output: [OUTPUT DESCRIPTION AND TYPE]
Requirements:
- [REQUIREMENT 1]
- [REQUIREMENT 2]
Example usage: [EXAMPLE]
```

### Data Structure Design Template
```
I need to design a data structure for [PURPOSE]
The information I need to store includes:
- [DATA ELEMENT 1] (type: [TYPE])
- [DATA ELEMENT 2] (type: [TYPE])
I'll need to perform these operations:
- [OPERATION 1]
- [OPERATION 2]
Performance considerations: [CONSIDERATIONS]
```

### System Design Template
```
I need to design a [COMPONENT/SYSTEM] for [PURPOSE]
It needs to include these components:
- [COMPONENT 1] which does [FUNCTION]
- [COMPONENT 2] which does [FUNCTION]
These components should interact by [INTERACTION PATTERN]
Additional requirements:
- [REQUIREMENT 1]
- [REQUIREMENT 2]
```

### Unit Test Generation Template
```
I need to write unit tests for this function:
[FUNCTION CODE]

The function is supposed to [EXPECTED BEHAVIOR].
Input parameters:
- [PARAM 1]: [DESCRIPTION] (valid values: [EXAMPLES])
- [PARAM 2]: [DESCRIPTION] (valid values: [EXAMPLES])

Expected output for normal cases:
- [EXAMPLE INPUT] should return [EXPECTED OUTPUT]

Edge cases to consider:
- [EDGE CASE 1]
- [EDGE CASE 2]

Please help me create pytest test cases covering both normal functionality and edge cases.
```

### Test-Driven Development Template
```
I need to implement a function with this signature:
[FUNCTION SIGNATURE]

Purpose: [WHAT THE FUNCTION SHOULD DO]

Requirements:
- [REQUIREMENT 1]
- [REQUIREMENT 2]

Test cases the function should pass:
1. [INPUT] should return [OUTPUT]
2. [INPUT] should return [OUTPUT]
3. If [EDGE CASE], it should [EXPECTED BEHAVIOR]

Please help me first write pytest test cases for these requirements, then implement the function that passes these tests.
```

### Mock Object Template
```
I'm testing a function that depends on [EXTERNAL DEPENDENCY]. 
Here's my function:
[FUNCTION CODE]

I need to create a mock for [DEPENDENCY] that:
- Simulates [BEHAVIOR 1]
- Responds to [METHOD CALL] with [RESPONSE]
- Allows me to verify [SPECIFIC INTERACTION]

Please help me create the appropriate mock objects and tests to verify my function without using the real dependency.
```

---

## Course Materials and Resources

### Required Materials
- Python 3.9+ installed on student computers
- Text editor or IDE (VS Code recommended)
- Course GitHub repository access
- AI assistant account (specific platform to be determined)
- pytest framework and extensions
- Coverage.py for test coverage analysis

### Recommended Resources
- "Python Crash Course" by Eric Matthes (reference text)
- "Effective Python" by Brett Slatkin (advanced reference)
- "Python Testing with pytest" by Brian Okken
- "Test-Driven Development with Python" by Harry Percival (selected chapters)
- Official Python documentation (python.org)
- Course-specific prompt engineering and testing handbook (provided digitally)

---

## Course Policies

### Assessment Breakdown
- Weekly Projects: 35%
- Quizzes and Exercises: 20%
- Prompt Engineering Portfolio: 15%
- Testing Implementation: 10%
- Final Project: 20%

### Attendance and Participation
- Students are expected to attend all sessions
- Active participation in workshops and code reviews is essential
- Missed sessions should be compensated through additional exercises

### Late Submissions
- Projects submitted within 24 hours after deadline: 10% penalty
- Projects submitted within 48 hours after deadline: 25% penalty
- Projects submitted more than 48 hours after deadline: 50% penalty
- No submissions accepted after 1 week

### Academic Integrity
- All submitted code must be original or properly attributed
- AI assistance must be documented as specified in course guidelines
- Plagiarism will result in course failure

---

## Support and Resources

### Office Hours
- Instructor office hours: [SCHEDULE]
- Teaching assistant availability: [SCHEDULE]

### Online Support
- Course forum for questions and discussions
- Weekly check-in sessions for individual support
- Prompt engineering review sessions on request

### Additional Resources
- Python community meetups (virtual participation encouraged)
- Recommended online practice platforms
- AI assistant documentation and tutorials

---

*This syllabus is subject to change based on class progress and needs. All changes will be communicated in advance.*
